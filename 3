# 3) Создайте собственный класс-исключение, который должен проверять содержимое списка на наличие только чисел.
# Проверить работу исключения на реальном примере.
# Необходимо запрашивать у пользователя данные и заполнять список только числами.
# Класс-исключение должен контролировать типы данных элементов списка.
# Примечание: длина списка не фиксирована.
# Элементы запрашиваются бесконечно, пока пользователь сам не остановит работу скрипта,
# введя, например, команду “stop”. При этом скрипт завершается, сформированный список с числами выводится на экран.
# Подсказка: для данного задания примем, что пользователь может вводить только числа и строки.
# При вводе пользователем очередного элемента необходимо реализовать проверку типа элемента и вносить его в список,
# только если введено число. Класс-исключение должен не позволить пользователю ввести текст (не число)
# и отобразить соответствующее сообщение.
# При этом работа скрипта не должна завершаться

class TypeError(Exception):

    def __init__(self, txt):
        self.txt = txt


result = 0
stop = False
my_list = []

while True:

    number = input('введите значения через пробел или stop для выхода - ').split()

    for el in range(len(number)):
        if number[el] == 'stop':
            stop = True
            print('выход из программы осуществлен')
            print(my_list)
            break
        try:
            if number[el].isdigit() == False:
                raise TypeError('Введено не число')
        except TypeError as err:
            print(err)

        else:
            my_list.append(int(number[el]))
