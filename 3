# 3)Реализовать программу работы с органическими клетками, состоящими из ячеек. Необходимо создать класс Клетка.
# В его конструкторе инициализировать параметр, соответствующий количеству ячеек клетки (целое число).
# В классе должны быть реализованы методы перегрузки арифметических операторов: сложение (__add__()),
# вычитание (__sub__()), умножение (__mul__()), деление (__truediv__()).
# Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение,
# умножение и целочисленное (с округлением до целого) деление клеток, соответственно.
# Сложение. Объединение двух клеток.
# При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.
# Вычитание. Участвуют две клетки.
# Операцию необходимо выполнять только если разность количества ячеек двух клеток больше нуля,
# иначе выводить соответствующее сообщение.
# Умножение. Создается общая клетка из двух.
# Число ячеек общей клетки определяется как произведение количества ячеек этих двух клеток.
# Деление. Создается общая клетка из двух.
# Число ячеек общей клетки определяется как целочисленное деление количества ячеек этих двух клеток.
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
# Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****...,
# где количество ячеек между \n равно переданному аргументу.
# Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5. Тогда метод make_order() вернет строку: *****\n*****\n**.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5. Тогда метод make_order() вернет строку: *****\n*****\n*****.

class Cell:
    def __init__(self, quantity_cell):
        self.quantity_cell = int(quantity_cell)

    def __str__(self):
        return f'- {self.quantity_cell * "*"}'

    def __add__(self, other):
        self.result = Cell(self.quantity_cell + other.quantity_cell)
        return f'Операция сложения:  {Cell(self.quantity_cell + other.quantity_cell)}'

    def __sub__(self, other):
        self.result = Cell(self.quantity_cell - other.quantity_cell)

        return f'Операция вычитания:  {Cell(self.quantity_cell - other.quantity_cell)}'

    def __mul__(self, other):
        self.result = Cell(self.quantity_cell * other.quantity_cell)

        return f'Операция умножение:  {Cell(self.quantity_cell * other.quantity_cell)}'

    def __truediv__(self, other):
        self.result = Cell(round(self.quantity_cell // other.quantity_cell))
        return f'Операция деления: {Cell(round(self.quantity_cell // other.quantity_cell))}'

    def make_order(self, cells_in_res):
        res = ''
        for i in range(int(self.quantity_cell / cells_in_res)):
            res += f'{"*" * cells_in_res} \\n'
        res += f'{"*" * (self.quantity_cell % cells_in_res)}'
        return res


cells1 = Cell(10)
cells2 = Cell(5)
print(cells1)
print(cells2)
print(cells1 + cells2)
print(cells1 - cells2)
print(cells1 * cells2)
print(cells1 / cells2)

print(cells1.make_order(5))
print(cells2.make_order(2))
